#!/usr/bin/env python3

"""
Check page 160 onwards for details of the following:
https://edge.edx.org/c4x/BITSPilani/EEE231/asset/8086_family_Users_Manual_1_.pdf
"""

import ctypes
import argparse
from os import PathLike
from typing import Optional

OP_ENCODING_8086: dict[str, str] = {
    "1011": "MOV",
    "100010": "MOV",
}


class Disassemble:
    def __init__(self, filepath: PathLike):
        self._file_path: PathLike = filepath
        self._machine_code: bytes

        self._op_code: str = ""
        self._d: Optional[str] = ""
        self._w: str = ""

        self._mod: str = ""
        self._reg: str = ""
        self._rm: str = ""

        self._immediate_mode: bool = False

        self.src: str = ""
        self.dst: str = ""

        self._src_mnemonic: str = ""
        self._dst_mnemonic: str = ""

    def _read_machine_code(self):
        with open(self._file_path, "rb") as f:
            self._machine_code: bytes = f.read()

    def _get_op_code(self):
        self._op_binary: str = self._binary_code[:6]
        self._op_code: str = OP_ENCODING_8086.get(self._op_binary, "")
        if not self._op_code:
            self._op_binary: str = self._binary_code[:4]
            self._op_code: str = OP_ENCODING_8086.get(self._op_binary, "")

            self._immediate_mode: bool = True
            self._reg: str = self._binary_code[-3:]

    def _get_d_and_w(self) -> tuple[Optional[str], str]:
        self._d: Optional[str] = None

        if self._op_binary == "100010":
            self._d = self._binary_code[-2]  # 7th bit
            self._w: str = self._binary_code[-1]  # 8th bit
        elif self._op_binary == "1011":
            self._w = self._binary_code[-4]
            self._d = None

        return self._d, self._w

    def _get_src_dst_and_mod(self, reg, rm):
        if self._immediate_mode:
            self._mod = "11"
        else:
            self._mod: str = self._binary_code[:2]

        if self._d == "0":
            self._src: str = reg
            self._dst: str = rm
        elif self._d == "1":
            self._src: str = rm
            self._dst: str = reg
        else:
            self._immediate_mode: bool = True
            self._src: str = self._binary_code
            self._dst: str = reg

    def _get_mnemonics(self):
        mnemonic_map: dict[str, str] = {}
        if self._mod == "11":
            if self._w == "0":
                mnemonic_map: dict[str, str] = {
                    "000": "AL",
                    "001": "CL",
                    "010": "DL",
                    "011": "BL",
                    "100": "AH",
                    "101": "CH",
                    "110": "DH",
                    "111": "BH",
                }
            elif self._w == "1":
                mnemonic_map: dict[str, str] = {
                    "000": "AX",
                    "001": "CX",
                    "010": "DX",
                    "011": "BX",
                    "100": "SP",
                    "101": "BP",
                    "110": "SI",
                    "111": "DI",
                }
        elif self._mod == "00":
            mnemonic_map: dict[str, str] = {
                "000": "[BX + SI]",
                "001": "[BX + DI]",
                "010": "[BP + SI]",
                "011": "[BP + DI]",
                "100": "[SI]",
                "101": "[DI]",
                "110": "DIR]CT ADDRESS",
                "111": "[BX]",
            }
        elif self._mod == "01":
            mnemonic_map: dict[str, str] = {
                "000": "[BX + SI] + D8",
                "001": "[BX + DI] + D8",
                "010": "[BP + SI] + D8",
                "011": "[BP + DI] + D8",
                "100": "[SI] + D8",
                "101": "[DI] + D8",
                "110": "[BP] + D8",
                "111": "[BX] + D8",
            }
        elif self._mod == "10":
            mnemonic_map: dict[str, str] = {
                "000": "[BX + SI] + D16",
                "001": "[BX + DI] + D16",
                "010": "[BP + SI] + D16",
                "011": "[BP + DI] + D16",
                "100": "[SI] + D16",
                "101": "[DI] + D16",
                "110": "[BP] + D16",
                "111": "[BX] + D16",
            }

        if not mnemonic_map:
            print("Failed to find mnemonic_map...")
            return ""

        if self._immediate_mode:
            self._src_mnemonic: str = self._src

        else:
            self._src_mnemonic: str = mnemonic_map.get(self._src, "")

        self._dst_mnemonic: str = mnemonic_map.get(self._dst, "")

    def run(self):
        self._read_machine_code()

        first_byte: bool = True
        one_byte_displacement: bool = False
        for i, each_byte in enumerate(self._machine_code):
            if one_byte_displacement:
                one_byte_displacement: bool = False
                continue

            self._binary_code: str = format(each_byte, "08b")

            if first_byte:
                self._get_op_code()
                self._get_d_and_w()
                first_byte = False
                # print(f"OP: {self._op_code}, D: {self._d}, W: {self._w}")
            else:
                if not self._op_code:
                    print(f"No op code, previous byte okay?: {self._binary_code}")
                    return

                if not self._immediate_mode:
                    self._reg: str = self._binary_code[2:5]
                rm: str = self._binary_code[5:]

                self._get_src_dst_and_mod(self._reg, rm)

                if self._w == "1" and i != 1:
                    self._src: str = str(
                        self._binary_code + format(self._machine_code[i + 1], "08b"),
                    )
                    one_byte_displacement: bool = True
                if self._immediate_mode:
                    if len(self._src) == 8:
                        int_val = ctypes.c_int8(int(self._src, 2)).value
                    else:
                        bytes_str = int(self._src, 2).to_bytes(2, "big")
                        array_type = ctypes.c_ubyte * 2
                        array = array_type(*bytes_str)
                        int_val = ctypes.cast(
                            ctypes.addressof(array), ctypes.POINTER(ctypes.c_int16)
                        ).contents.value

                    self._src: str = str(int_val)

                self._get_mnemonics()

                # print(f"MOD: {self._mod}, REG: {self._reg}, RM: {rm}")

                # Reset
                self._mod = "11"
                self._d = ""
                self._w = ""
                self._immediate_mode: bool = False
                first_byte = True

                print(
                    f"{self._op_code} {self._dst_mnemonic}, {self._src_mnemonic}".lower(),
                    # end="\n\n",
                )

            # print(f"i: {i}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="Disassembler",
        description="Disassembles machine code to assembly language",
    )
    parser.add_argument("filepath")
    args = parser.parse_args()
    filepath: PathLike = args.filepath

    disassembler = Disassemble(filepath)

    disassembler.run()
