#!/usr/bin/env python3

"""
Check page 160 onwards for details of the following:
https://edge.edx.org/c4x/BITSPilani/EEE231/asset/8086_family_Users_Manual_1_.pdf
"""

import struct
import argparse
from os import PathLike
from typing import Optional


def _disassemble_8086(filepath: PathLike):
    op_code_decodes: dict = {"100010": "MOV"}
    reg_decodes: dict = {
        "w0": {
            "000": "AL",
            "001": "CL",
            "010": "DL",
            "011": "BL",
            "100": "AH",
            "101": "CH",
            "110": "DH",
            "111": "BH",
        },
        "w1": {
            "000": "AX",
            "001": "CX",
            "010": "DX",
            "011": "BX",
            "100": "SP",
            "101": "DP",
            "110": "SI",
            "111": "DI",
        },
    }

    with open(filepath, "rb") as f:
        machine_code = f.read()

    instruction: str = ""

    w: int = 0

    i = 0
    while i < len(machine_code):
        byte_code = struct.unpack("B", machine_code[i : i + 1])[0]
        i += 1

        binary_code = format(byte_code, "08b")

        if i % 2:
            op_code: Optional[str] = op_code_decodes.get(binary_code[:6], None)

            if op_code is None:
                continue

            instruction += op_code

            w: int = int(binary_code[-1])  # W is in first byte

        else:
            binary_code = binary_code[
                2:
            ]  # Stripping MOD bits as we know it is an operation between registers instead of memory
            reg_1 = binary_code[:3]
            reg_2 = binary_code[3:]

            src: str = reg_decodes.get(f"w{w}", {}).get(reg_1)
            dst: str = reg_decodes.get(f"w{w}", {}).get(reg_2)

            instruction += f" {dst}, {src}\n"

    print(instruction.lower())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="Disassembler",
        description="Disassembles machine code to assembly language",
    )
    parser.add_argument("filepath")
    args = parser.parse_args()
    filepath: PathLike = args.filepath

    _disassemble_8086(filepath)
